#define STORY_PARTS 2000
// Story progression system, used with linear story. Set scene to be played when interacting with specific object/hotspot/character etc.
/*
Ways to access data with id 2:
character[2];
character[2].Room;
object[2];
hotspot[2];
*/
int currentStoryProgression = 0;
//objects & hotspots in current room
Dictionary* storyObjects;
Dictionary* storyHotspots;
//not storing characters, because those are global



void StoryProgression::Init(){
    this.objectId = -1;
    this.hotspotId = -1;
    this.characterId = -1;
    this.roomId = -1;
    this.dialogId = -1;
    this.cutAwayName = "";
    this.interactionType = eInteract;
    this.ID = -1;
}

void StoryProgression::Execute(){
    //play the story i.e. dialog
    Display("Story executed");
    if(this.dialogId >= 0) dialog[this.dialogId].Start();
    currentStoryProgression++;//progress the story.
}

int freeStorySlot = 0;//used to fill the array at correct index since there is no "push"
StoryProgression Story[STORY_PARTS];

static void StoryProgression::Add(LocationType type, int typeId, int storyId, int dialogId, String cutAwayName, int roomId, InteractionType interactionType, InventoryItem *item){
    if(freeStorySlot >= STORY_PARTS - 1) {
        Display("Reached story limit, can't add more");
        return;
    }
    Story[freeStorySlot].Init();
    
    Story[freeStorySlot].roomId = roomId;
    Story[freeStorySlot].dialogId = dialogId;
    Story[freeStorySlot].ID = storyId;
    Story[freeStorySlot].cutAwayName = cutAwayName;
    Story[freeStorySlot].interactionType = interactionType;
    Story[freeStorySlot].item = item;
    if(item != null) Story[freeStorySlot].item = item;
    if(type == eLocationCharacter){
        Story[freeStorySlot].characterId = typeId;
    }
    else if(type == eLocationHotspot){
        Story[freeStorySlot].hotspotId = typeId;
    }
    else if(type == eLocationObject){
        Story[freeStorySlot].objectId = typeId;
    }
    freeStorySlot++;//increment story slot before next one is added to the array.
}



//===========================================================================
//
// StoryInteractObject()
// Story will progress if you interact with an object.
// Since Objects are per room, you need to tell which room that object exists in.
//
//===========================================================================
function StoryInteractObject(int storyId, int dialogID, String cutAwayName, String objectName, int roomId){
    //This wont work since objects can be in different room...
    /*int objectId = GetObjectId(objectName);
    if(objectId < 0) {
        Display(String.Format("Cant find object with name: %s", objectName));
        return;
    }
    StoryProgression.Add(eLocationObject, objectId, storyId, dialogID, cutAwayName, roomId, eInteract, null);*/
}


//===========================================================================
//
// StoryUseItemOnObject()
// Story will progress if you use specified item on an object in specific ROOM
// Since Objects are per room, you need to tell which room that object exists in.
//
//===========================================================================
function StoryUseItemOnObject(int storyId, int dialogID, String cutAwayName, String objectName, int roomId, InventoryItem *itemRequired){
    
}


//===========================================================================
//
// StoryInteractHotspot()
// Story will progress if you interact with a hotspot.
// Since Hotspots are per room, you need to tell which room that hotspot exists in.
//
//===========================================================================
function StoryInteractHotspot(int storyId, int dialogID, String cutAwayName, String hotspotName, int roomId){
    
}


//===========================================================================
//
// StoryUseItemOnHotspot()
// Story will progress if you use specified item on a hotspot in specific ROOM
// Since Hotspots are per room, you need to tell which room that hotspot exists in.
//
//===========================================================================
function StoryUseItemOnHotspot(int storyId, int dialogID, String cutAwayName, String hotspotName, int roomId, InventoryItem *itemRequired){
    
}


//===========================================================================
//
// StoryInteractCharacter()
// Story will progress if you interact with a character.
//
//===========================================================================
function StoryInteractCharacter(int storyId, int dialogID, String cutAwayName, Character *characterRef){
    
}


//===========================================================================
//
// StoryUseItemOnCharacter()
// Story will progress if you use specified item on a character.
//
//===========================================================================
function StoryUseItemOnCharacter(int storyId, int dialogID, String cutAwayName, Character *characterRef, InventoryItem *itemRequired){
    
}

function UpdateQuest(){
    gDebug.Text = "";
    String nameTxt = "";
    int id = currentStoryProgression;
    
    if(Story[id].characterId >= 0){
        nameTxt = character[Story[id].characterId].Name;
    }
    if(Story[id].hotspotId >= 0){
        nameTxt = hotspot[Story[id].hotspotId].Name;
    }
    if(Story[id].objectId >= 0){
        nameTxt = object[Story[id].objectId].Name;
    }
    if(Story[id].item != null){
        gDebug.Text = gDebug.Text.Append(String.Format("Use %s on ", Story[id].item.Name));
    }
    else{
        gDebug.Text = gDebug.Text.Append("Click on ");
    }
    gDebug.Text = gDebug.Text.Append(nameTxt);
}


//===========================================================================
//
// game_start()
// Setup the Story array and Init it's values.
//
//===========================================================================
function game_start(){
    //Story = new Story[STORY_PARTS];
    for(int i = 0; i < STORY_PARTS; i++){
        Story[i].Init();
    }
    /*
    StoryProgression.Add(eLocationCharacter, CHARACTER_EGO, 123, DIALOG_01, "", ROOM_MAIN, eInteract, iKey);
    StoryProgression.Add(eLocationObject, OBJECT_BOOTS, 123, DIALOG_NULL, "", ROOM_MAIN, eInteract, null);
    StoryProgression.Add(eLocationCharacter, CHARACTER_EGO, 123, DIALOG_02, "", ROOM_MAIN, eInteract, iCup);
    */
    UpdateQuest();
}

//===========================================================================
//
// on_mouse_click (MouseButton button)
// Handle the event of player interacting with objects/hotspots/characters
// Used with the story progression system
//
//===========================================================================
function on_mouse_click (MouseButton button)
{
    if(button != eMouseLeft) return;
    LocationType locationType = GetLocationType(mouse.x, mouse.y);
    if(locationType == eLocationHotspot)
    {
        Hotspot *hotspotRef = Hotspot.GetAtScreenXY(mouse.x, mouse.y);
        int hotspotId = Story[currentStoryProgression].hotspotId;
        int roomId = Story[currentStoryProgression].roomId;
        bool haveItem = true;
        InventoryItem *itemNeeded = Story[currentStoryProgression].item;
        if(player.ActiveInventory != itemNeeded) haveItem = false;
        
        if(hotspotId == hotspotRef.ID && roomId == player.Room && haveItem){
            Story[currentStoryProgression].Execute();
        }
    }
    if(locationType == eLocationObject)
    {
        Object *objectRef = Object.GetAtScreenXY(mouse.x, mouse.y);
        int objectId = Story[currentStoryProgression].objectId;
        int roomId = Story[currentStoryProgression].roomId;
        bool haveItem = true;
        InventoryItem *itemNeeded = Story[currentStoryProgression].item;
        if(player.ActiveInventory != itemNeeded) haveItem = false;
        
        if(objectId == objectRef.ID && roomId == player.Room && haveItem){
            Story[currentStoryProgression].Execute();
        }

    }
    if(locationType == eLocationCharacter)
    {
        Character *characterRef = Character.GetAtScreenXY(mouse.x, mouse.y);
        int characterId = Story[currentStoryProgression].characterId;
        bool haveItem = true;
        InventoryItem *itemNeeded = Story[currentStoryProgression].item;
        if(player.ActiveInventory != itemNeeded) haveItem = false;
        //Not comparing to a room since characters can be anywhere.
        if(characterId == characterRef.ID && haveItem){
            Story[currentStoryProgression].Execute();
        }
    }
    UpdateQuest();
}


function on_event (EventType event, int data){
    if(event == eEventEnterRoomBeforeFadein){
        storyObjects = Dictionary.Create(eSorted);
        storyHotspots = Dictionary.Create(eSorted);
        for(int i = 0; i < Room.ObjectCount; i++){
            storyObjects.Set(object[i].Name, String.Format("%d",object[i].ID));
        }
        for(int i = 0; i < AGS_MAX_HOTSPOTS; i++){
            storyHotspots.Set(hotspot[i].Name, String.Format("%d",hotspot[i].ID));
        }
        UpdateQuest();
        /*gDebug.Text = "";
        gDebug.Text = gDebug.Text.Append(String.Format("Object Count:%d", storyObjects.ItemCount));
        gDebug.Text = gDebug.Text.Append("[");
        gDebug.Text = gDebug.Text.Append(String.Format("Hotspot Count:%d", storyHotspots.ItemCount));*/
    }
}